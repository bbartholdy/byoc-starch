samp_data
for(i in 1:dim(samp_data)[2]){
unk <- samp_data_corr[,i]
malt_mg <- (unk - b0) / b1
units <- malt_mg * dilf / ml_enz
out[,i] <- units
}
samp_data_corr <- samp_data - blank_mat
out <- as.data.frame(matrix(nrow = nrow(samp_data), ncol = ncol(samp_data)))
for(i in 1:dim(samp_data)[2]){
unk <- samp_data_corr[,i]
malt_mg <- (unk - b0) / b1
units <- malt_mg * dilf / ml_enz
out[,i] <- units
}
samp_data <- saliva_samples$plate1_phot1_saliva
samp_data
blank_mat <- blank %>% # extend blanks to match dimensions of samp_data
slice(rep(1:n(), each = dim(samp_data)[1]))
blank_mat
samp_data_corr <- samp_data - blank_mat
samp_data_corr
out <- as.data.frame(matrix(nrow = nrow(samp_data), ncol = ncol(samp_data)))
out
devtools::document()
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
rm(list = ls())
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
n()
devtools::document()
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
blank <- stdBMM1.ph1$blank
blank
blank_mat <- matrix(blank, nrow = 3, ncol = 3)
blank_mat
blank_mat <- matrix(blank, nrow = 3, ncol = 3, byrow = F)
blank_mat
blank_mat <- matrix(blank, nrow = 3, ncol = 3, byrow = T)
blank_mat
devtools::load_all()
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
nrow(sal1_ph1)
samp_data <- sal1_ph1
blank <- stdH2O1.ph1
model <- stdBMM1.ph1$std_curve
blank <- stdH2O1.ph1$blank
replicates <- stdH2O1.ph1
model <- stdH2O1.ph1
model <- stdH2O1.ph1$std_curve
model <- std_curve$std_curve
b0 <- coef(model)[1]
b1 <- coef(model)[2]
blank_mat <- matrix(
blank,
nrow = nrow(samp_data),
ncol = ncol(samp_data),
byrow = T) # extend blanks to match dimensions of samp_data
samp_data_corr <- samp_data - blank_mat
blank_mat
samp_data - blank_mat
samp_data
samp_data_corr <- samp_data %-% blank_mat
class(samp_data)
samp_data_corr <- as.matrix(samp_data) - blank_mat
as.matrix(samp_data)
class(blank_mat)
samp_data
samp_data %>%
- blank_mat
samp_data_mat <- as.matrix(samp_data)
samp_data_mat - blank_mat
plt1_ph1 <- readr::read_table(
here::here("analysis/Amylase/ExpM_plate1_photometric1.txt"),
col_names = F)
plt1_ph2 <- readr::read_table(
here::here("analysis/Amylase/ExpM_plate1_photometric2.txt"),
col_names = F)
plt2_ph1 <- readr::read_table(
here::here("analysis/Amylase/ExpM_plate2_photometric1.txt"),
col_names = F)
plt2_ph2 <- readr::read_table(
here::here("analysis/Amylase/ExpM_plate2_photometric2.txt"),
col_names = F)
# two standard curves prepared: one in h2o and one in artificial saliva (BMM)
stdH2O1.ph1 <- stdcurve(plt1_ph1, cols = 7:9)
stdBMM1.ph1 <- stdcurve(plt1_ph1, cols = 10:12)
#library(byocstarch)
devtools::load_all()
# two standard curves prepared: one in h2o and one in artificial saliva (BMM)
stdH2O1.ph1 <- stdcurve(plt1_ph1, cols = 7:9)
library(tidyverse)
# two standard curves prepared: one in h2o and one in artificial saliva (BMM)
stdH2O1.ph1 <- stdcurve(plt1_ph1, cols = 7:9)
stdBMM1.ph1 <- stdcurve(plt1_ph1, cols = 10:12)
stdH2O1.ph2 <- stdcurve(plt1_ph2, cols = 7:9)
stdBMM1.ph2 <- stdcurve(plt1_ph2, cols = 10:12)
stdH2O2.ph1 <- stdcurve(plt2_ph1, cols = 7:9)
stdBMM2.ph1 <- stdcurve(plt2_ph1, cols = 10:12)
stdH2O2.ph2 <- stdcurve(plt2_ph2, cols = 7:9)
stdBMM2.ph2 <- stdcurve(plt2_ph2, cols = 10:12)
plates <- list("plate1_phot1" = plt1_ph1, "plate1_phot2" = plt1_ph2,
"plate2_phot1" = plt2_ph1, "plate2_phot2" = plt2_ph2)
phot_results <- lapply(plates, sep_samples)
# saliva calculation
split_results <- lapply(phot_results, split, f = ~ solution)
saliva_samples <- list("plate1_phot1_saliva" = split_results$plate1_phot1$saliva,
"plate1_phot1_saliva" = split_results$plate1_phot2$saliva,
"plate1_phot1_saliva" = split_results$plate2_phot1$saliva,
"plate1_phot1_saliva" = split_results$plate2_phot2$saliva) %>%
lapply(select, !solution)
sal1_ph1 <- sample_calc(saliva_samples$plate1_phot1_saliva,
std_curve = stdH2O1.ph1,
dilf = 2, ml_enz = 0.075)
samp_data_corr <- as.matrix(samp_data) - blank_mat
samp_data <- saliva_samples$plate1_phot1_saliva
ls
blank <- stdH2O1.ph1$blank
stdH2O1.ph1$replicates
replicates <- 3
model <- stdH2O1.ph1$std_curve
b0 <- coef(model)[1]
b1 <- coef(model)[2]
blank_mat <- matrix(
blank,
nrow = nrow(samp_data),
ncol = ncol(samp_data),
byrow = T) # extend blanks to match dimensions of samp_data
blank_mat
samp_data_corr <- as.matrix(samp_data) - blank_mat
rownames(samp_data) <- NULL
samp_data
class(samp_data)
samp_data_corr <- as.matrix(samp_data) - blank_mat
as.matrix(samp_data)
blank_mat
colnames(samp_data) <- NULL
samp_data - blank_mat
as.matrix(samp_data) - blank_mat
typeof(samp_data)
samp_data
as.matrix(samp_data)
class(as.matrix(samp_data))
typeof(as.matrix(samp_data))
samp_data_corr <- as.matrix(samp_data) - blank_mat
samp_data <- as.matrix(samp_data)
dim(samp_data)
dim(blank_mat)
typeof(samp_data)
typeof(blank_mat)
blank_mat
as.matrix(blank_mat)
typeof(as.matrix(blank_mat))
samp_data_corr <- samp_data - blank
blank
samp_data
samp_data_corr
?mapply
mapply(samp_data - blank)
mapply(samp_data := blank)
:=
samp_data := blank
samp_data %-% blank
samp_data %*% blank
samp_data - t(blank)
?sweep
blank_mat <- blank %>%
slice(1:ncol(samp_data))# extend blanks to match dimensions of samp_data
blank_mat
blank_mat <- blank %>%
slice(rep(1:ncol(samp_data)))# extend blanks to match dimensions of samp_data
blank_mat
blank_mat <- blank %>%
slice(rep(1:ncol(samp_data), each = nrow(samp_data)))# extend blanks to match dimensions of samp_data
blank_mat
samp_data
samp_data - blank
samp_data - blank_mat
blank <- stdH2O1.ph1
blank
blank <- stdH2O1.ph1$blank
blank
as.matrix(blank)
blank_mat
blank_mat <- blank %>%
slice(rep(1:ncol(samp_data), each = nrow(samp_data)))# extend blanks to match dimensions of samp_data
blank_mat
samp_data
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
rm(list = ls())
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
saliva_samples$plate1_phot1_saliva
ncol(saliva_samples$plate1_phot1_saliva)
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
rep(1:3)
rep(1:3, each = 3)
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
blank <- stdH2O1.ph1$blank
ls
samp_data <- saliva_samples$plate1_phot1_saliva
samp_data
n_rows <- nrow(samp_data)
n_cols <- ncol(samp_data)
blank_mat <- blank[rep(seq_len(n_rows), each = n_cols), ]
blank_mat
out <- as.data.frame(matrix(nrow = n_rows, ncol = ncol(samp_data)))
blank_mat <- blank[rep(seq_len(n_rows), each = n_cols), ]
blank_mat
n_rows
n_cols
rep(seq_len(n_rows), each = n_cols)
blank[rep(seq_len(n_rows), each = n_cols), ]
seq_len(n_rows)
blank[rep(seq_len(n_rows), each = 3), ]
rep(seq_len(n_rows), each = n_cols)
rm(blank_mat)
blank_mat <- blank[rep(seq_len(n_rows), each = n_cols), ]
blank_mat <- blank[rep(seq_len(n_rows), each = n_cols), ] %>%
na.rm
blank_mat <- blank[rep(seq_len(n_rows), each = n_cols), ] %>%
na.omit
blank_mat
blank[rep(seq_len(n_rows), each = 1), ]
blank[rep(seq_len(n_rows), each = 2), ]
blank[rep(seq_len(n_rows)), ]
seq_len(n_rows)
blank[seq_len(n_rows), ]
blank[,seq_len(n_rows)]
blank[, rep(seq_len(n_rows), each = n_cols)]
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
bmm1_ph1
bmm1_ph2
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.path = "../figures/")
library(tidyverse)
library(broom)
library(here)
library(patchwork)
# load R scripts
source(here("analysis/scripts/analysis.R"))
source(here("analysis/scripts/tables.R"))
source(here("analysis/scripts/figures.R"))
source(here("analysis/scripts/amylase-assay.R"))
## Compile refs.bib using rbbt package ##
cite_keys <- rbbt::bbt_detect_citations(here("analysis/paper/paper.Rmd"))
#cite_keys <- unlist(cite_keys, use.names = FALSE)
rbbt::bbt_write_bib(here("analysis/paper/refs.bib"), keys = cite_keys, overwrite = T)
## end refs.bib ##
# table of results reported in units amylase per mL enzyme (but let's be honest,
# ...it doesn't really matter what the unit is. No activity is no activity)
cols <- c("1", "2", "3")
rows <- c("S1", "S2", "S3", "B1", "B2", "B3", "B4", "B5", "BT1", "BT2", "BT3")
plt1_ph1_result <- rbind(sal1_ph1, bmm1_ph1)
plt1_ph1_result[plt1_ph1_result < 0] <- 0
plt1_ph1_result <- plt1_ph1_result / 6 # convert result to per minute
plt1_ph2_result <- rbind(sal1_ph2, bmm1_ph2)
plt1_ph2_result[plt1_ph2_result < 0] <- 0
plt1_ph2_result <- plt1_ph2_result / 6
plt2_ph1_result <- rbind(sal2_ph1, bmm2_ph1)
plt2_ph1_result[plt2_ph1_result < 0] <- 0
plt2_ph1_result <- plt2_ph1_result / 6
plt2_ph2_result <- rbind(sal2_ph2, bmm2_ph2)
plt2_ph2_result[plt2_ph2_result < 0] <- 0
plt2_ph2_result <- plt2_ph2_result / 6
rownames(plt1_ph1_result) <- rows
colnames(plt1_ph1_result) <- cols
knitr::kable(plt1_ph1_result, row.names = TRUE, caption = "Amylase activity. Plate 1, photometric reading 1. Negative values converted to 0")
rownames(plt2_ph1_result) <- rows
colnames(plt2_ph1_result) <- cols
knitr::kable(plt2_ph1_result, row.names = TRUE, caption = "Amylase activity. Plate 2, photometric reading 1. Negative values converted to 0")
usethis::use_package("ggplot2")
plt1_ph1_result <- signif(plt1_ph1_result)
rownames(plt1_ph1_result) <- rows
colnames(plt1_ph1_result) <- cols
knitr::kable(plt1_ph1_result, row.names = TRUE, caption = "Amylase activity in units per mL enzyme, where a unit is mg maltose released from starch in 1 minute. Plate 1, photometric reading 1. Negative values converted to 0")
plt1_ph1_result <- signif(plt1_ph1_result, 2)
knitr::kable(plt1_ph1_result, row.names = TRUE, caption = "Amylase activity in units per mL enzyme, where a unit is mg maltose released from starch in 1 minute. Plate 1, photometric reading 1. Negative values converted to 0")
plt1_ph1_result <- signif(plt1_ph1_result, 3)
knitr::kable(plt1_ph1_result, row.names = TRUE, caption = "Amylase activity in units per mL enzyme, where a unit is mg maltose released from starch in 1 minute. Plate 1, photometric reading 1. Negative values converted to 0")
rownames(plt1_ph1_result) <- rows
colnames(plt1_ph1_result) <- cols
knitr::kable(signif(plt1_ph1_result, 3), row.names = TRUE, caption = "Amylase activity in units per mL enzyme, where a unit is mg maltose released from starch in 1 minute. Plate 1, photometric reading 1. Negative values converted to 0")
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.path = "../figures/")
library(tidyverse)
library(broom)
library(here)
library(patchwork)
# load R scripts
source(here("analysis/scripts/analysis.R"))
source(here("analysis/scripts/tables.R"))
source(here("analysis/scripts/figures.R"))
source(here("analysis/scripts/amylase-assay.R"))
## Compile refs.bib using rbbt package ##
cite_keys <- rbbt::bbt_detect_citations(here("analysis/paper/paper.Rmd"))
#cite_keys <- unlist(cite_keys, use.names = FALSE)
rbbt::bbt_write_bib(here("analysis/paper/refs.bib"), keys = cite_keys, overwrite = T)
## end refs.bib ##
knitr::include_graphics(here("analysis/figures", "ExpL_protocol.png"))
# table of results reported in units amylase per mL enzyme (but let's be honest,
# ...it doesn't really matter what the unit is. No activity is no activity)
cols <- c("1", "2", "3")
rows <- c("S1", "S2", "S3", "B1", "B2", "B3", "B4", "B5", "BT1", "BT2", "BT3")
plt1_ph1_result <- rbind(sal1_ph1, bmm1_ph1)
plt1_ph1_result[plt1_ph1_result < 0] <- 0
plt1_ph1_result <- plt1_ph1_result / 6 # convert result to per minute
plt1_ph2_result <- rbind(sal1_ph2, bmm1_ph2)
plt1_ph2_result[plt1_ph2_result < 0] <- 0
plt1_ph2_result <- plt1_ph2_result / 6
plt2_ph1_result <- rbind(sal2_ph1, bmm2_ph1)
plt2_ph1_result[plt2_ph1_result < 0] <- 0
plt2_ph1_result <- plt2_ph1_result / 6
plt2_ph2_result <- rbind(sal2_ph2, bmm2_ph2)
plt2_ph2_result[plt2_ph2_result < 0] <- 0
plt2_ph2_result <- plt2_ph2_result / 6
plt1_ph1_result <- signif(plt1_ph1_result, 3)
rownames(plt1_ph1_result) <- rows
colnames(plt1_ph1_result) <- cols
knitr::kable(signif(plt1_ph1_result, 3), row.names = TRUE, caption = "Amylase activity in units per mL enzyme, where a unit is mg maltose released from starch in 1 minute. Plate 1, photometric reading 1. Negative values converted to 0")
rownames(plt1_ph1_result) <- rows
colnames(plt1_ph1_result) <- cols
knitr::kable(signif(plt1_ph1_result, 4), row.names = TRUE, caption = "Amylase activity in units per mL enzyme, where a unit is mg maltose released from starch in 1 minute. Plate 1, photometric reading 1. Negative values converted to 0")
rownames(plt1_ph1_result) <- rows
colnames(plt1_ph1_result) <- cols
knitr::kable(signif(plt1_ph1_result, 5), row.names = TRUE, caption = "Amylase activity in units per mL enzyme, where a unit is mg maltose released from starch in 1 minute. Plate 1, photometric reading 1. Negative values converted to 0")
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.path = "../figures/")
library(tidyverse)
library(broom)
library(here)
library(patchwork)
# load R scripts
source(here("analysis/scripts/analysis.R"))
source(here("analysis/scripts/tables.R"))
source(here("analysis/scripts/figures.R"))
source(here("analysis/scripts/amylase-assay.R"))
## Compile refs.bib using rbbt package ##
cite_keys <- rbbt::bbt_detect_citations(here("analysis/paper/paper.Rmd"))
#cite_keys <- unlist(cite_keys, use.names = FALSE)
rbbt::bbt_write_bib(here("analysis/paper/refs.bib"), keys = cite_keys, overwrite = T)
## end refs.bib ##
knitr::include_graphics(here("analysis/figures", "ExpL_protocol.png"))
# table of results reported in units amylase per mL enzyme (but let's be honest,
# ...it doesn't really matter what the unit is. No activity is no activity)
cols <- c("1", "2", "3")
rows <- c("S1", "S2", "S3", "B1", "B2", "B3", "B4", "B5", "BT1", "BT2", "BT3")
plt1_ph1_result <- rbind(sal1_ph1, bmm1_ph1)
plt1_ph1_result[plt1_ph1_result < 0] <- 0
plt1_ph1_result <- plt1_ph1_result / 6 # convert result to per minute
plt1_ph2_result <- rbind(sal1_ph2, bmm1_ph2)
plt1_ph2_result[plt1_ph2_result < 0] <- 0
plt1_ph2_result <- plt1_ph2_result / 6
plt2_ph1_result <- rbind(sal2_ph1, bmm2_ph1)
plt2_ph1_result[plt2_ph1_result < 0] <- 0
plt2_ph1_result <- plt2_ph1_result / 6
plt2_ph2_result <- rbind(sal2_ph2, bmm2_ph2)
plt2_ph2_result[plt2_ph2_result < 0] <- 0
plt2_ph2_result <- plt2_ph2_result / 6
rownames(plt1_ph1_result) <- rows
colnames(plt1_ph1_result) <- cols
knitr::kable(signif(plt1_ph1_result, 5), row.names = TRUE, caption = "Amylase activity in units per mL enzyme, where a unit is mg maltose released from starch in 1 minute. Plate 1, photometric reading 1. Negative values converted to 0")
rownames(plt1_ph1_result) <- rows
colnames(plt1_ph1_result) <- cols
knitr::kable(signif(plt1_ph1_result, 4), row.names = TRUE, caption = "Amylase activity in units per mL enzyme, where a unit is mg maltose released from starch in 1 minute. Plate 1, photometric reading 1. Negative values converted to 0")
rownames(plt1_ph1_result) <- rows
colnames(plt1_ph1_result) <- cols
knitr::kable(signif(plt1_ph1_result, 3), row.names = TRUE, caption = "Amylase activity in units per mL enzyme, where a unit is mg maltose released from starch in 1 minute. Plate 1, photometric reading 1. Negative values converted to 0")
knitr::kable(anova_tbl,
col.names = c("Treatment", "Mean", "SD", "Min", "Max"),
caption = "Summary statistics for biofilm dry-weights (in mg) by treatment.")
count_sol_out <- count_sol %>%
mutate(across(c(s, m, l, total),
function(x)
paste0(round(x), " (", scales::percent(x / total, 0.1), ")")))
### adding the 'both' row to the data frame ###
count_sol_comb_out <- count_sol_comb %>%
mutate(across(c(s, m, l, total),
function(x)
paste0(round(x), " (", scales::percent(x / total, 0.1), ")")))
count_sol_out <- count_sol %>%
mutate(across(c(s, m, l, total),
function(x)
paste0(round(x), " (", scales::percent(x / total, 0.1), ")"))) %>%
ungroup() %>%
add_row(tibble_row(count_sol_comb_out), .before = 3)
cnames <- c("Solution", "Starch", "Small (%)", "Medium (%)", "Large (%)", "Total (%)")
knitr::kable(count_sol_out, col.names = cnames,
caption = "Mean starch counts from solutions, including the
proportional makeup of the different sizes of granules.")
count_sample <- count_sample %>%
ungroup() %>%
add_row(count_sample_comb, .after = 2)
# convert columns to contain mean count and percentage of total count
count_samp_per <- count_sample %>%
mutate(across(c(s, m, l, total),
function(x)
paste0(round(x), " (", scales::percent(signif(x / total, 3)), ")")))
# count_samp_comb_per <- count_sample_comb %>%
#   mutate(across(c(s, m, l, total),
#                 function(x)
#                   paste0(round(x), " (", scales::percent(x / total, 0.1), ")")))
# count_samp_comb_out <- tibble(count_samp_comb_per, count_sample_comb_sd, .name_repair = "unique") %>%
#   select(1,2,3,7,4,8,5,9,6,10) #%>%
#add_row(tibble_row(count_sample_comb_out), .before = 3)
count_samp_out <- tibble(count_samp_per, count_sample_sd, .name_repair = "unique") %>%
select(1,2,3,7,4,8,5,9,6,10) #%>%
#add_row(tibble_row(count_sample_comb_out), .before = 3)
cnames <- c("Treatment", "Starch", "Small (%)", "SD", "Medium (%)", "SD",
"Large (%)", "SD", "Total (%)", "SD")
knitr::kable(count_samp_out, col.names = cnames,
caption = "Mean starch counts extracted from samples with standard
deviation (SD), including the proportion of granule sizes of the total count.")
29/8
8/29
15/29
22/29
c(3.75, 15, 30, 45, 60, 75, 150) * 0.002
# convert mL 0.2% Maltose to mg maltose
mg_malt <- c(3.75, 15, 30, 45, 60, 75, 150) * 0.002
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
stdH2O1.ph1
stdH2O2.ph1
plt1_ph1_result
stdBMM1.ph1 <- stdcurve(plt1_ph1, cols = 10:12, mg_maltose = mg_malt)
bmm1_ph1 <- sample_calc(bmm_samples$plate1_phot1_bmm,
std_curve = stdBMM1.ph1,
dilf = 1, ml_enz = 0.075)
# results in units / mL enzyme where a unit is mg maltose released in 6 minutes
plt1_ph1_result <- rbind(sal1_ph1, bmm1_ph1)
plt1_ph1_result
source("/media/bjorn/hogwarts/Uni/publications/PhD/byocstarch/analysis/scripts/amylase-assay.R", echo=TRUE)
plt1_ph1_result
devtools::document()
plt1_ph2_result
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.path = "../figures/")
library(tidyverse)
library(broom)
library(here)
library(patchwork)
# load R scripts
source(here("analysis/scripts/analysis.R"))
source(here("analysis/scripts/tables.R"))
source(here("analysis/scripts/figures.R"))
source(here("analysis/scripts/amylase-assay.R"))
## Compile refs.bib using rbbt package ##
cite_keys <- rbbt::bbt_detect_citations(here("analysis/paper/paper.Rmd"))
#cite_keys <- unlist(cite_keys, use.names = FALSE)
rbbt::bbt_write_bib(here("analysis/paper/refs.bib"), keys = cite_keys, overwrite = T)
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.path = "../figures/")
library(tidyverse)
library(broom)
library(here)
library(patchwork)
# load R scripts
source(here("analysis/scripts/analysis.R"))
source(here("analysis/scripts/tables.R"))
source(here("analysis/scripts/figures.R"))
source(here("analysis/scripts/amylase-assay.R"))
## Compile refs.bib using rbbt package ##
cite_keys <- rbbt::bbt_detect_citations(here("analysis/paper/paper.Rmd"))
#cite_keys <- unlist(cite_keys, use.names = FALSE)
rbbt::bbt_write_bib(here("analysis/paper/refs.bib"), keys = cite_keys, overwrite = T)
## end refs.bib ##
knitr::include_graphics(here("analysis/figures", "ExpL_protocol.png"))
# table of results reported in units amylase per mL enzyme (but let's be honest,
# ...it doesn't really matter what the unit is. No activity is no activity)
cols <- c("1", "2", "3")
rows <- c("S1", "S2", "S3", "B1", "B2", "B3", "B4", "B5", "BT1", "BT2", "BT3")
plt1_ph1_result <- rbind(sal1_ph1, bmm1_ph1)
plt1_ph1_result[plt1_ph1_result < 0] <- 0
#plt1_ph1_result <- plt1_ph1_result / 6 # convert result to per minute
plt1_ph2_result <- rbind(sal1_ph2, bmm1_ph2)
plt1_ph2_result[plt1_ph2_result < 0] <- 0
#plt1_ph2_result <- plt1_ph2_result / 6
plt2_ph1_result <- rbind(sal2_ph1, bmm2_ph1)
plt2_ph1_result[plt2_ph1_result < 0] <- 0
#plt2_ph1_result <- plt2_ph1_result / 6
plt2_ph2_result <- rbind(sal2_ph2, bmm2_ph2)
plt2_ph2_result[plt2_ph2_result < 0] <- 0
#plt2_ph2_result <- plt2_ph2_result / 6
rownames(plt1_ph1_result) <- rows
colnames(plt1_ph1_result) <- cols
knitr::kable(signif(plt1_ph1_result, 3), row.names = TRUE, caption = "Amylase activity in units per mL enzyme, where a unit is mg maltose released from starch in 1 minute. Plate 1, photometric reading 1. Negative values converted to 0")
count_sample
subset(count_sample$total, treatment == "wheat")
subset(count_sample, treatment == "wheat")
subset(count_sample, treatment == "wheat")$total
count_sol
count_sol
